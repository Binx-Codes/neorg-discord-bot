# Automatically generated by Pynguin.

import log as module_0

# from pytest import test

class TestLogClass():

    def test_case_0(self):
        bool_0 = False
        customed_logger_0 = module_0.get_logger()
        assert customed_logger_0.filters == []
        assert customed_logger_0.name is None
        assert customed_logger_0.level == 0
        assert customed_logger_0.parent is None
        assert customed_logger_0.propagate is True
        assert len(customed_logger_0.handlers) == 1
        assert customed_logger_0.disabled is False
        assert module_0.TRACE_LEVEL == 5
        var_0 = customed_logger_0.trace(bool_0)
        assert var_0 is None

    def test_case_1(self):
        module_0.setup()
        assert module_0.TRACE_LEVEL == 5

    def test_case_2(self):
        str_0 = "'O"
        list_0 = [str_0]
        tuple_0 = (str_0, list_0)
        list_1 = [str_0, list_0, list_0, str_0]
        int_0 = 1500
        str_1 = ':~f8;vWE~!9<!I%'
        float_0 = 2864.4087
        list_2 = [float_0]
        dict_0 = {
            int_0: int_0,
            str_1: float_0,
            str_1: list_2,
            int_0: float_0
        }
        complex_0 = None
        tuple_1 = (complex_0,)
        str_2 = '(]&k{@YV}7Vt9'
        list_3 = [str_2, list_2, str_1]
        tuple_2 = (tuple_1, list_3)
        tuple_3 = (dict_0, int_0, str_1, tuple_2)
        int_1 = 2068
        customed_logger_0 = module_0.CustomedLogger(tuple_3, int_1)
        assert customed_logger_0.filters == []
        assert len(customed_logger_0.name) == 4
        assert customed_logger_0.level == 2068
        assert customed_logger_0.parent is None
        assert customed_logger_0.propagate is True
        assert len(customed_logger_0.handlers) == 1
        assert customed_logger_0.disabled is False
        assert module_0.TRACE_LEVEL == 5
        var_0 = customed_logger_0.trace(tuple_0, *list_1)
        assert var_0 is None
        module_0.setup()
